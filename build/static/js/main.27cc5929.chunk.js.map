{"version":3,"sources":["components/FileUploader/FileUploader.component.js","components/IconButton/IconButton.component.js","assets/icons/Chevron.icon.js","components/SelectInput/SelectInput.component.js","assets/icons/Copy.icon.js","components/FilesViewer/FilesViewer.component.js","modules/JPTextHeader/JPTextHeader.component.js","components/Progressbar/Progressbar.component.js","components/Cloud/Cloud.component.js","modules/JPTextFooter/JPTextFooter.component.js","App.js","serviceWorker.js","index.js"],"names":["FileUploader","onChange","className","type","event","Array","from","target","files","file","IconButton","text","icon","onClick","toolTipText","useState","isTooltipOpen","setIsTooltipOpen","hasTooltip","Boolean","setTimeout","Chevron","width","height","viewBox","d","fill","SelectInput","options","defaultValue","isOpen","setIsOpen","hasOptions","length","parsedOptions","state","map","option","key","onOptionClick","Copy","FilesViewer","selectedFile","setSelectedFile","hasFile","File","fileNames","name","imageSource","URL","createObjectURL","useEffect","lastFileUploaded","fileName","fileSelected","find","inputWithConvertedData","document","getElementById","select","execCommand","id","value","convertedText","placeholder","disabled","src","alt","JPTextHeader","Progressbar","progress","status","progressInverted","style","right","Cloud","alignments","variant","alignmentsParsed","Object","keys","reduce","alignmentId","alignmentValue","isHorizontalAlignment","JPTextFooter","elementIdToScroll","App","setStatus","setConvertedText","setFiles","readImage","useCallback","a","worker","createWorker","logger","toFixed","load","loadLanguage","initialize","recognize","data","oldFiles","oldFile","isConvertedFile","top","left","filesFiltered","filter","elementToScroll","scrollIntoView","behavior","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0bAGaA,G,YAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAS7B,OACE,yBAAKC,UAAU,0BACb,2BACEA,UAAU,uBACVC,KAAK,OACLF,SAbqB,SAACG,GAAW,IAAD,EACrBC,MAAMC,KAAKF,EAAMG,OAAOC,OAAhCC,EAD6B,oBAGhCA,GACFR,EAASQ,MAYT,uBAAGP,UAAU,wBAAb,0BAEA,uBAAGA,UAAU,4BAAb,oBCnBOQ,G,MAAa,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASX,EAA6B,EAA7BA,UAAWY,EAAkB,EAAlBA,YAAkB,EACnCC,oBAAS,GAD0B,mBACtEC,EADsE,KACvDC,EADuD,KAEvEC,EAAaC,QAAQL,GAU3B,OACE,4BAAQZ,UAAS,iBAAYA,GAAaW,QATtB,WACpBI,GAAiB,GAEjBG,YAAW,kBAAMH,GAAiB,KAAQ,KAE1CJ,MAKGK,GACC,0BAAMhB,UAAS,mBAAcc,EAAgB,OAAS,KACnDF,GAIL,8BAAOH,GAENC,KCvBMS,EAAU,WACrB,OACE,yBAAKC,MAAO,GAAIC,OAAQ,GAAIC,QAAQ,uBAClC,0BACEC,EAAE,ieACFC,KAAK,mBCFAC,G,MAAc,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,aAAc5B,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UAAgB,EACjDa,oBAAS,GADwC,mBACtEe,EADsE,KAC9DC,EAD8D,KAGvEC,EAAab,QAAQS,EAAQK,QAC7BC,EAAgBF,EAAaJ,EAAU,CAAC,SAU9C,OACE,yBAAK1B,UAAS,0BAAqBA,IACjC,kBAAC,EAAD,CACEA,UAAS,yBAAoB4B,EAAS,OAAS,IAC/CnB,KAAMkB,GAAgB,cACtBjB,KAAM,kBAAC,EAAD,MACNC,QAAS,kBAAMkB,GAAU,SAACI,GAAD,OAAYA,QAGtCL,GACC,yBAAK5B,UAAU,2BACZgC,EAAcE,KAAI,SAACC,GAAD,OACjB,yBACEC,IAAKD,EACLnC,UAAU,iBACVW,QAAS,kBAvBC,SAACwB,GACjBL,GACF/B,EAASoC,GAGXN,GAAU,GAkBeQ,CAAcF,KAE5BA,UClCFG,G,MAAO,WAClB,OACE,yBAAKhB,QAAQ,sBAAsBF,MAAM,KAAKC,OAAO,MACnD,0BACEE,EAAE,gXACFC,KAAK,oBCIAe,EAAc,SAAC,GAAe,IAAbjC,EAAY,EAAZA,MAAY,EACAO,mBAAS,IADT,mBACjC2B,EADiC,KACnBC,EADmB,KAGlCC,EAAUF,aAAwBG,KAElCC,EAAYtC,EAAM4B,KAAI,qBAAGW,QACzBC,EAAcJ,EAChBK,IAAIC,gBAAgBR,GAXxB,+EAsBAS,qBAAU,WACR,IAAMC,EAAmB5C,EAAMA,EAAMyB,OAAS,GAE1CmB,GACFT,EAAgBS,KAEjB,CAAC5C,IAcJ,OACE,yBAAKN,UAAU,yBACb,yBAAKA,UAAU,2DACb,yBAAKA,UAAU,qCACb,kBAAC,EAAD,CACEA,UAAU,eACV0B,QAASkB,EACT7C,SAnCiB,SAACoD,GAC1B,IAAMC,EAAe9C,EAAM+C,MAAK,qBAAGR,OAAoBM,KAEnDC,GACFX,EAAgBW,IAgCVzB,aAAca,EAAaK,OAG7B,kBAAC,EAAD,CAAYnC,KAAM,kBAAC,EAAD,MAAUC,QAvBV,WACxB,IAAM2C,EAAyBC,SAASC,eA7BX,yBAiCzBF,IACFA,EAAuBG,SAEvBF,SAASG,YAAY,UAeuC9C,YAAY,aAGtE,8BACE+C,GAvDuB,wBAwDvB3D,UAAU,2BACV4D,MAAOpB,EAAaqB,eAAiB,GACrC9D,SAAU,aACV+D,YAAY,gCACZC,UAAQ,KAIZ,yBAAK/D,UAAU,wDACb,uBAAGA,UAAU,uBAAb,WACA,yBACEA,UAAU,wBACVgE,IAAKlB,EACLmB,IAAI,eC3EDC,G,MAAe,WAC1B,OACE,wBAAIlE,UAAU,gBACZ,0BAAMA,UAAU,iBAAhB,OADF,SCFSmE,G,MAAc,SAAC,GAA8B,IAA5BR,EAA2B,EAA3BA,GAAIS,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OACpCC,EAAmB,IAAMF,EAE/B,OACE,yBAAKT,GAAIA,EAAI3D,UAAU,wBACrB,uBAAGA,UAAU,oBAAoBqE,GAEjC,yBAAKrE,UAAU,qBACb,0BAAMA,UAAU,YAAYoE,EAA5B,KACA,0BACEpE,UAAU,mBACVuE,MAAO,CAAEC,MAAM,GAAD,OAAKF,EAAL,Y,4OCXjB,IAAMG,EAAQ,SAAC,GAAkC,IAAD,IAA/BC,kBAA+B,MAAlB,GAAkB,EAAdC,EAAc,EAAdA,QACjCC,EAAmBC,OAAOC,KAAKJ,GAAYK,QAC/C,SAACH,EAAkBI,GACjB,IAAMC,EAAiBP,EAAWM,GAC5BE,EACY,SAAhBF,GAA0C,UAAhBA,EAE5B,O,yVAAO,CAAP,GACKJ,EADL,eAEGI,EAAmC,UAC7BC,EADQC,EAAqB,eAKxC,IAGF,OACE,yBAAKlF,UAAU,iBAAiBuE,MAAOK,GACrC,0BAAM5E,UAAS,gBAAW2E,GAAW,cCnB9BQ,G,MAAe,WAC1B,OAAO,yBAAKnF,UAAU,sBCMlBoF,EAAoB,mBAyEXC,MAvEf,WAAgB,IAAD,EACexE,mBAAS,CACnCuD,SAAU,EACVC,OAAQ,+BAHG,mBACNA,EADM,KACEiB,EADF,OAK6BzE,mBAAS,IALtC,mBAKNgD,EALM,KAKS0B,EALT,OAMa1E,mBAAS,IANtB,mBAMNP,EANM,KAMCkF,EAND,KAQPC,EAAYC,sBAAW,uCAAC,WAAOnF,GAAP,mBAAAoF,EAAA,6DACtBC,EAASC,uBAAa,CAC1BC,OAAQ,gBAAGzB,EAAH,EAAGA,OAAQD,EAAX,EAAWA,SAAX,OACNkB,EAAU,CAAEjB,SAAQD,SAA+B,IAArBA,EAAS2B,eAHf,SAMtBH,EAAOI,OANe,uBAQtBJ,EAAOK,aAAa,OARE,uBAUtBL,EAAOM,WAAW,OAVI,uBAclBN,EAAOO,UAAU5F,GAdC,gBAalBE,EAbkB,EAa1B2F,KAAQ3F,KAGV8E,EAAiB9E,GACjB6E,EAAU,CAAEjB,OAAQ,aAAcD,SAAU,MAE5CoB,GAAS,SAACa,GACR,OAAOA,EAASnE,KAAI,SAACoE,GACnB,IAAMC,EAAkBD,EAAQzD,OAAStC,EAAKsC,KAM9C,OAJI0D,IACFhG,EAAKsD,cAAgBpD,GAGhB8F,EAAkBhG,EAAO+F,QA3BR,4CAAD,sDA8B1B,IAaH,OACE,oCACE,kBAAC,EAAD,CAAO5B,WAAY,CAAE8B,IAAK,GAAIC,MAAO,IAAM9B,QAAQ,WACnD,kBAAC,EAAD,CAAOD,WAAY,CAAE8B,IAAK,GAAIC,KAAM,IAAM9B,QAAQ,cAElD,yBAAK3E,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAcD,SAnBC,SAACQ,GACpB,IAAMmG,EAAgBpG,EAAMqG,QAAO,qBAAG9D,OAAoBtC,EAAKsC,QACzD+D,EAAkBrD,SAASC,eAAe4B,GAEhDK,EAAUlF,GAEVqG,EAAgBC,eAAe,CAAEC,SAAU,WAE3CtB,EAAS,GAAD,mBAAKkB,GAAL,CAAoBnG,QAaxB,kBAAC,EAAD,eAAaoD,GAAIyB,GAAuBf,IAExC,kBAAC,EAAD,CAAaR,cAAeA,EAAevD,MAAOA,KAGpD,kBAAC,EAAD,QClEcW,QACW,cAA7B8F,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9D,SAASC,eAAe,SDyHpB,kBAAmB8D,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27cc5929.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FileUploader.styles.css\";\n\nexport const FileUploader = ({ onChange }) => {\n  const handleFileSelected = (event) => {\n    const [file] = Array.from(event.target.files);\n\n    if (file) {\n      onChange(file);\n    }\n  };\n\n  return (\n    <div className=\"file-uploader--wrapper\">\n      <input\n        className=\"file-uploader__input\"\n        type=\"file\"\n        onChange={handleFileSelected}\n      />\n\n      <p className=\"file-uploader__title\">Drop your images here!</p>\n\n      <p className=\"file-uploader__sub-title\">or click here</p>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./IconButton.styles.css\";\n\nexport const IconButton = ({ text, icon, onClick, className, toolTipText }) => {\n  const [isTooltipOpen, setIsTooltipOpen] = useState(false);\n  const hasTooltip = Boolean(toolTipText);\n\n  const onButtonClick = () => {\n    setIsTooltipOpen(true);\n\n    setTimeout(() => setIsTooltipOpen(false), 1000);\n\n    onClick();\n  };\n\n  return (\n    <button className={`button ${className}`} onClick={onButtonClick}>\n      {hasTooltip && (\n        <span className={`tool-tip ${isTooltipOpen ? \"open\" : \"\"}`}>\n          {toolTipText}\n        </span>\n      )}\n\n      <span>{text}</span>\n\n      {icon}\n    </button>\n  );\n};\n","import React from \"react\";\n\nexport const Chevron = () => {\n  return (\n    <svg width={24} height={24} viewBox=\"0 0 444.819 444.819\">\n      <path\n        d=\"M434.252 114.203l-21.409-21.416c-7.419-7.04-16.084-10.561-25.975-10.561-10.095 0-18.657 3.521-25.7 10.561L222.41 231.549 83.653 92.791c-7.042-7.04-15.606-10.561-25.697-10.561-9.896 0-18.559 3.521-25.979 10.561l-21.128 21.416C3.615 121.436 0 130.099 0 140.188c0 10.277 3.619 18.842 10.848 25.693l185.864 185.865c6.855 7.23 15.416 10.848 25.697 10.848 10.088 0 18.75-3.617 25.977-10.848l185.865-185.865c7.043-7.044 10.567-15.608 10.567-25.693.001-9.901-3.523-18.559-10.566-25.985z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Chevron } from \"../../assets/icons/Chevron.icon\";\nimport { IconButton } from \"../IconButton/IconButton.component\";\nimport \"./SelectInput.styles.css\";\n\nexport const SelectInput = ({ options, defaultValue, onChange, className }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const hasOptions = Boolean(options.length);\n  const parsedOptions = hasOptions ? options : [\"Empty\"];\n\n  const onOptionClick = (option) => {\n    if (hasOptions) {\n      onChange(option);\n    }\n\n    setIsOpen(false);\n  };\n\n  return (\n    <div className={`select--wrapper ${className}`}>\n      <IconButton\n        className={`select__button ${isOpen ? \"open\" : \"\"}`}\n        text={defaultValue || \"Select file\"}\n        icon={<Chevron />}\n        onClick={() => setIsOpen((state) => !state)}\n      />\n\n      {isOpen && (\n        <div className=\"select__option--wrapper\">\n          {parsedOptions.map((option) => (\n            <div\n              key={option}\n              className=\"select__option\"\n              onClick={() => onOptionClick(option)}\n            >\n              {option}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const Copy = () => {\n  return (\n    <svg viewBox=\"0 0 477.867 477.867\" width=\"24\" height=\"24\">\n      <path\n        d=\"M341.333 85.333H51.2c-28.277 0-51.2 22.923-51.2 51.2v290.133c0 28.277 22.923 51.2 51.2 51.2h290.133c28.277 0 51.2-22.923 51.2-51.2V136.533c0-28.277-22.923-51.2-51.2-51.2z M426.667 0h-307.2c-28.124-.001-50.984 22.684-51.2 50.807v.393h273.067c47.105.056 85.277 38.228 85.333 85.333V409.6h.393c28.124-.216 50.808-23.076 50.807-51.2V51.2c0-28.277-22.923-51.2-51.2-51.2z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IconButton } from \"../IconButton/IconButton.component\";\nimport { SelectInput } from \"../SelectInput/SelectInput.component\";\nimport \"./FilesViewer.styles.css\";\nimport { Copy } from \"../../assets/icons/Copy.icon\";\n\nconst defaultImageUrl =\n  \"https://i.pinimg.com/originals/ae/8a/c2/ae8ac2fa217d23aadcc913989fcc34a2.png\";\n\nconst inputWithConvertedDataId = \"converted-data-viewer\";\n\nexport const FilesViewer = ({ files }) => {\n  const [selectedFile, setSelectedFile] = useState({});\n\n  const hasFile = selectedFile instanceof File;\n\n  const fileNames = files.map(({ name }) => name);\n  const imageSource = hasFile\n    ? URL.createObjectURL(selectedFile)\n    : defaultImageUrl;\n\n  const changeSelectedFile = (fileName) => {\n    const fileSelected = files.find(({ name }) => name === fileName);\n\n    if (fileSelected) {\n      setSelectedFile(fileSelected);\n    }\n  };\n\n  useEffect(() => {\n    const lastFileUploaded = files[files.length - 1];\n\n    if (lastFileUploaded) {\n      setSelectedFile(lastFileUploaded);\n    }\n  }, [files]);\n\n  const copyConvertedText = () => {\n    const inputWithConvertedData = document.getElementById(\n      inputWithConvertedDataId\n    );\n\n    if (inputWithConvertedData) {\n      inputWithConvertedData.select();\n\n      document.execCommand(\"copy\");\n    }\n  };\n\n  return (\n    <div className=\"files-viewer--wrapper\">\n      <div className=\"files-viewer__content files-viewer__text-input--wrapper\">\n        <div className=\"files-viewer__text-input__options\">\n          <SelectInput\n            className=\"files-select\"\n            options={fileNames}\n            onChange={changeSelectedFile}\n            defaultValue={selectedFile.name}\n          />\n\n          <IconButton icon={<Copy />} onClick={copyConvertedText} toolTipText=\"Copied!\"/>\n        </div>\n\n        <textarea\n          id={inputWithConvertedDataId}\n          className=\"files-viewer__text-input\"\n          value={selectedFile.convertedText || \"\"}\n          onChange={() => {}}\n          placeholder=\"Converted data is shown here!\"\n          disabled\n        />\n      </div>\n\n      <div className=\"files-viewer__preview--wrapper files-viewer__content\">\n        <p className=\"files-viewer__title\">Preview</p>\n        <img\n          className=\"files-viewer__preview\"\n          src={imageSource}\n          alt=\"preview\"\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./JPTextHeader.styles.css\";\n\nexport const JPTextHeader = () => {\n  return (\n    <h1 className=\"header-title\">\n      <span className=\"header-strong\">JPT</span>ext\n    </h1>\n  );\n};\n","import React from \"react\";\nimport \"./Progressbar.styles.css\";\n\nexport const Progressbar = ({ id, progress, status }) => {\n  const progressInverted = 100 - progress;\n\n  return (\n    <div id={id} className=\"progressbar--wrapper\">\n      <p className=\"progress__status\">{status}</p>\n\n      <div className=\"progress__wrapper\">\n        <span className=\"progress\">{progress}%</span>\n        <span\n          className=\"progress__filler\"\n          style={{ right: `${progressInverted}%` }}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Cloud.styles.css\";\n\nexport const Cloud = ({ alignments = {}, variant }) => {\n  const alignmentsParsed = Object.keys(alignments).reduce(\n    (alignmentsParsed, alignmentId) => {\n      const alignmentValue = alignments[alignmentId];\n      const isHorizontalAlignment =\n        alignmentId === \"left\" || alignmentId === \"right\";\n\n      return {\n        ...alignmentsParsed,\n        [alignmentId]: isHorizontalAlignment\n          ? `${alignmentValue}vw`\n          : `${alignmentValue}vh`,\n      };\n    },\n    {}\n  );\n\n  return (\n    <div className=\"cloud--wrapper\" style={alignmentsParsed}>\n      <span className={`cloud ${variant || \"normal\"}`} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./JPTextFooter.styles.css\"\n\nexport const JPTextFooter = () => {\n  return <div className=\"footer--wrapper\"></div>;\n};\n","import React, { useCallback, useState } from \"react\";\nimport { createWorker } from \"tesseract.js\";\nimport \"./App.css\";\nimport { FileUploader } from \"./components/FileUploader/FileUploader.component\";\nimport { FilesViewer } from \"./components/FilesViewer/FilesViewer.component\";\nimport { JPTextHeader } from \"./modules/JPTextHeader/JPTextHeader.component\";\nimport { Progressbar } from \"./components/Progressbar/Progressbar.component\";\nimport { Cloud } from \"./components/Cloud/Cloud.component\";\nimport { JPTextFooter } from \"./modules/JPTextFooter/JPTextFooter.component\";\n\nconst elementIdToScroll = \"scrolled-element\";\n\nfunction App() {\n  const [status, setStatus] = useState({\n    progress: 0,\n    status: \"Upload your file to start!\",\n  });\n  const [convertedText, setConvertedText] = useState(\"\");\n  const [files, setFiles] = useState([]);\n\n  const readImage = useCallback(async (file) => {\n    const worker = createWorker({\n      logger: ({ status, progress }) =>\n        setStatus({ status, progress: progress.toFixed() * 100 }),\n    });\n\n    await worker.load();\n\n    await worker.loadLanguage(\"eng\");\n\n    await worker.initialize(\"eng\");\n\n    const {\n      data: { text },\n    } = await worker.recognize(file);\n\n    setConvertedText(text);\n    setStatus({ status: \"Completed!\", progress: 100 });\n\n    setFiles((oldFiles) => {\n      return oldFiles.map((oldFile) => {\n        const isConvertedFile = oldFile.name === file.name;\n\n        if (isConvertedFile) {\n          file.convertedText = text;\n        }\n\n        return isConvertedFile ? file : oldFile;\n      });\n    });\n  }, []);\n\n  const onFileUpload = (file) => {\n    const filesFiltered = files.filter(({ name }) => name !== file.name);\n    const elementToScroll = document.getElementById(elementIdToScroll);\n\n    readImage(file);\n\n    elementToScroll.scrollIntoView({ behavior: \"smooth\" });\n\n    setFiles([...filesFiltered, file]);\n  };\n\n  return (\n    <>\n      <Cloud alignments={{ top: 38, left: -15 }} variant=\"normal\" />\n      <Cloud alignments={{ top: 10, left: 60 }} variant=\"short-top\" />\n\n      <div className=\"App\">\n        <JPTextHeader />\n\n        <FileUploader onChange={onFileUpload} />\n\n        <Progressbar id={elementIdToScroll} {...status} />\n\n        <FilesViewer convertedText={convertedText} files={files} />\n      </div>\n\n      <JPTextFooter />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}